name: preview

on:
  pull_request:
    branches: ['main']

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      node_version: ${{ steps.extract-versions.outputs.node_version }}
      pnpm_version: ${{ steps.extract-versions.outputs.pnpm_version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract Node.js and pnpm versions from package.json
        id: extract-versions
        shell: bash
        run: |
          NODE_VERSION=$(jq -r '.engines.node' package.json)
          PNPM_VERSION=$(jq -r '.packageManager' package.json | cut -d "@" -f 2)
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT
          echo "pnpm_version=$PNPM_VERSION" >> $GITHUB_OUTPUT

  lint:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node_version }}

      - name: Install pnpm and dependencies
        run: |
          npm install -g pnpm@${{ needs.setup.outputs.pnpm_version }}
          pnpm install

      - name: Run lint
        run: pnpm run lint

  audit:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ needs.setup.outputs.node_version }}

      - name: Install pnpm and dependencies
        run: |
          npm install -g pnpm@${{ needs.setup.outputs.pnpm_version }}
          pnpm install

      - name: Audit dependencies
        run: pnpm audit

  wait-for-vercel:
    runs-on: ubuntu-latest
    needs: [lint, audit]
    outputs:
      deployments: ${{ steps.set-urls.outputs.deployments }}
    steps:
      - name: Wait for Vercel Deployment
        id: set-urls
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          TEAM_ID: team_CbbcZzr5hBahVwYDcJf0f3tN
        run: |
          declare -A PROJECTS=(
            ["sansa"]="prj_2ON1pBH3BXFDAOGpyuorGAV9b5mQ"
            ["ned"]="prj_aAip83ytHFRnVV7bq50Nh9c0GaMk"
            ["bran"]="prj_3PDlo66PRWY1B1fwfCtCOZoX7ror"
            ["arya"]="prj_DytZfE86EQiggEoKelCi1bvvH1Q8"
          )

          DEPLOYMENTS_JSON="{"
          BRANCH_NAME="${GITHUB_HEAD_REF:-${GITHUB_REF#refs/heads/}}"

          for project in "${!PROJECTS[@]}"; do
            PROJECT_ID=${PROJECTS[$project]}
            echo "Checking deployment status for $project..."

            for i in {1..10}; do
              RESPONSE=$(curl -s -H "Authorization: Bearer $VERCEL_TOKEN" \
                "https://api.vercel.com/v6/deployments?teamId=$TEAM_ID&projectId=$PROJECT_ID")

              DEPLOYMENT_URL=$(echo "$RESPONSE" | jq -r --arg branch "$BRANCH_NAME" '.deployments[] | select(.meta.githubCommitRef == $branch) | .url' | head -n 1)

              if [[ -n "$DEPLOYMENT_URL" && "$DEPLOYMENT_URL" != "null" ]]; then
                echo "✅ $project is ready! URL: https://$DEPLOYMENT_URL"
                DEPLOYMENTS_JSON+="\"$project\":\"https://$DEPLOYMENT_URL\","
                break
              fi

              echo "⏳ $project is still deploying... (attempt $i/10)"
              sleep 15
            done
          done

          DEPLOYMENTS_JSON="${DEPLOYMENTS_JSON%,}}"
          echo "deployments=$DEPLOYMENTS_JSON" >> $GITHUB_OUTPUT

  run-e2e-tests:
    needs: wait-for-vercel
    if: ${{ needs.wait-for-vercel.outputs.deployments != '{}' }}
    strategy:
      matrix:
        project: [arya, sansa, bran, ned]
    runs-on: ubuntu-latest
    env:
      BASE_URL: ${{ fromJson(needs.wait-for-vercel.outputs.deployments)[matrix.project] }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Extract Node.js and pnpm versions from package.json
        id: extract-versions
        run: |
          NODE_VERSION=$(jq -r '.engines.node' package.json)
          PNPM_VERSION=$(jq -r '.packageManager' package.json | cut -d "@" -f 2)
          echo "node_version=$NODE_VERSION" >> $GITHUB_OUTPUT
          echo "pnpm_version=$PNPM_VERSION" >> $GITHUB_OUTPUT

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ steps.extract-versions.outputs.pnpm_version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ steps.extract-versions.outputs.node_version }}
          cache: pnpm

      - name: Install dependencies
        run: pnpm install

      - name: Install Playwright Browsers
        run: pnpm exec playwright install --with-deps

      - name: Run Playwright tests for ${{ matrix.project }}
        run: pnpm run ${{ matrix.project }}:e2e
        env:
          BASE_URL: ${{ env.BASE_URL }}

      - name: Upload Playwright Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-reports-${{ matrix.project }}
          path: '**/playwright-report/'
          retention-days: 30

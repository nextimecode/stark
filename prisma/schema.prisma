generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REJECTED
}

enum RelationshipType {
  LOVE
  FRIENDSHIP
  WORK
  FAMILY
}

model User {
  id            Int       @id @default(autoincrement())
  uid           String    @unique @default(uuid())
  firebaseId    String    @unique
  username      String
  name          String
  email         String    @unique
  emailVerified Boolean
  picture       String?
  provider      String
  authTime      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  compatibilityAttributes CompatibilityAttributes?

  invitesSent     Invite[]            @relation("InvitesSent")
  invitesReceived Invite[]            @relation("InvitesReceived")
  testsInitiated  CompatibilityTest[] @relation("TestsInitiated")
  testsReceived   CompatibilityTest[] @relation("TestsReceived")
}

model CompatibilityAttributes {
  id       Int     @id @default(autoincrement())
  uid      String  @unique @default(uuid())
  userId   Int     @unique
  mbtiType String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Invite {
  id          Int          @id @default(autoincrement())
  uid         String       @unique @default(uuid())
  senderId    Int
  recipientId Int?
  status      InviteStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  acceptedAt  DateTime?

  sender    User  @relation("InvitesSent", fields: [senderId], references: [id])
  recipient User? @relation("InvitesReceived", fields: [recipientId], references: [id])

  @@index([senderId, recipientId])
}

model CompatibilityTest {
  id               Int              @id @default(autoincrement())
  uid              String           @unique @default(uuid())
  user1Id          Int
  user2Id          Int
  relationshipType RelationshipType
  prompt           String
  result           Json
  model            String?
  createdAt        DateTime         @default(now())

  user1 User @relation("TestsInitiated", fields: [user1Id], references: [id])
  user2 User @relation("TestsReceived", fields: [user2Id], references: [id])

  @@unique([user1Id, user2Id, createdAt])
  @@index([user1Id])
  @@index([user2Id])
}

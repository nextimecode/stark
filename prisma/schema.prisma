generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Answer {
  id         Int      @id @default(autoincrement())
  uid        String   @unique @default(uuid())
  questionId Int
  text       String
  value      Int
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Category {
  id          Int        @id @default(autoincrement())
  uid         String     @unique @default(uuid())
  name        String
  description String?
  createdAt   DateTime   @default(now()) @db.Timestamptz(6)
  questions   Question[]
}

model Comparison {
  id                 Int      @id @default(autoincrement())
  uid                String   @unique @default(uuid())
  testId1            Int
  testId2            Int
  compatibilityScore Float
  details            Json
  createdAt          DateTime @default(now()) @db.Timestamptz(6)
  test1              Test     @relation("ComparisonTest1", fields: [testId1], references: [id], onDelete: Cascade, onUpdate: NoAction)
  test2              Test     @relation("ComparisonTest2", fields: [testId2], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Invitation {
  id                 Int              @id @default(autoincrement())
  uid                String           @unique @default(uuid())
  senderId           Int
  email              String
  relationshipTypeId Int
  status             String           @default("pending")
  testId             Int?
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  expiresAt          DateTime         @default(dbgenerated("(now() + '7 days'::interval)")) @db.Timestamptz(6)
  relationshipType   RelationshipType @relation(fields: [relationshipTypeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  sender             User             @relation(fields: [senderId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  test               Test?            @relation(fields: [testId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model QuestionRelation {
  questionId         Int
  relationshipTypeId Int
  weight             Float            @default(1.0)
  question           Question         @relation(fields: [questionId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  relationshipType   RelationshipType @relation(fields: [relationshipTypeId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([questionId, relationshipTypeId])
}

model Question {
  id         Int                @id @default(autoincrement())
  uid        String             @unique @default(uuid())
  categoryId Int
  text       String
  weight     Int                @default(1)
  createdAt  DateTime           @default(now()) @db.Timestamptz(6)
  answers    Answer[]
  category   Category           @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  relations  QuestionRelation[]
}

model RelationshipType {
  id          Int                @id @default(autoincrement())
  uid         String             @unique @default(uuid())
  name        String             @unique
  description String?
  createdAt   DateTime           @default(now()) @db.Timestamptz(6)
  invitations Invitation[]
  relations   QuestionRelation[]
  tests       Test[]
}

model Test {
  id                 Int              @id @default(autoincrement())
  uid                String           @unique @default(uuid())
  userId             Int
  relationshipTypeId Int
  results            Json
  createdAt          DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime         @default(now()) @db.Timestamptz(6)
  comparisons1       Comparison[]     @relation("ComparisonTest1")
  comparisons2       Comparison[]     @relation("ComparisonTest2")
  invitations        Invitation[]
  relationshipType   RelationshipType @relation(fields: [relationshipTypeId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  user               User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model User {
  id            Int          @id @default(autoincrement())
  uid           String       @unique @default(uuid())
  firebaseId    String       @unique
  username      String?      @unique
  name          String?
  email         String       @unique
  emailVerified Boolean      @default(false)
  picture       String?
  provider      String       @default("email")
  authTime      DateTime?
  fullName      String?
  avatarUrl     String?
  createdAt     DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime     @default(now()) @db.Timestamptz(6)
  invitations   Invitation[]
  tests         Test[]
}

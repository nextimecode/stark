generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            Int       @id @default(autoincrement())
  uid           String    @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  firebaseId    String    @unique @map("firebase_id")
  username      String
  name          String
  email         String    @unique
  emailVerified Boolean   @map("email_verified")
  picture       String?
  provider      String
  authTime      DateTime? @map("auth_time")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")

  answers       Answer[]
  comments      Comment[]
  notifications Notification[]
  questions     Question[]

  @@map("users")
}

model Question {
  id           Int       @id @default(autoincrement())
  uid          String    @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title        String
  slug         String    @unique
  content      String
  createdAt    DateTime  @default(now()) @map("created_at")
  updatedAt    DateTime? @map("updated_at")
  authorId     Int       @map("author_id")
  bestAnswerId Int?      @unique @map("best_answer_id")

  author      User         @relation(fields: [authorId], references: [id])
  bestAnswer  Answer?      @relation("BestAnswer", fields: [bestAnswerId], references: [id])
  answers     Answer[]
  attachments Attachment[]
  comments    Comment[]

  @@map("questions")
}

model Answer {
  id         Int       @id @default(autoincrement())
  uid        String    @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content    String
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @map("updated_at")
  authorId   Int       @map("author_id")
  questionId Int       @map("question_id")

  author       User         @relation(fields: [authorId], references: [id])
  question     Question     @relation(fields: [questionId], references: [id])
  chosenAsBest Question?    @relation("BestAnswer")
  attachments  Attachment[]
  comments     Comment[]

  @@map("answers")
}

model Attachment {
  id         Int    @id @default(autoincrement())
  uid        String @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title      String
  url        String
  questionId Int?   @map("question_id")
  answerId   Int?   @map("answer_id")

  question Question? @relation(fields: [questionId], references: [id])
  answer   Answer?   @relation(fields: [answerId], references: [id])

  @@map("attachments")
}

model Comment {
  id         Int       @id @default(autoincrement())
  uid        String    @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  content    String
  authorId   Int       @map("author_id")
  questionId Int?      @map("question_id")
  answerId   Int?      @map("answer_id")
  createdAt  DateTime  @default(now()) @map("created_at")
  updatedAt  DateTime? @map("updated_at")

  author   User      @relation(fields: [authorId], references: [id])
  question Question? @relation(fields: [questionId], references: [id])
  answer   Answer?   @relation(fields: [answerId], references: [id])

  @@map("comments")
}

model Notification {
  id          Int       @id @default(autoincrement())
  uid         String    @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  recipientId Int       @map("recipient_id")
  title       String
  content     String
  readAt      DateTime? @map("read_at")
  createdAt   DateTime  @default(now()) @map("created_at")

  recipient User @relation(fields: [recipientId], references: [id])

  @@map("notifications")
}

enum UserRole {
  STUDENT
  INSTRUCTOR
}

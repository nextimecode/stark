generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

model User {
  email                   String                   @unique
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  authTime                DateTime?
  emailVerified           Boolean
  firebaseId              String                   @unique
  name                    String
  picture                 String?
  provider                String
  username                String
  uid                     String                   @unique @default(uuid())
  id                      Int                      @id @default(autoincrement())
  compatibilityAttributes CompatibilityAttributes?
  testsInitiated          CompatibilityTest[]      @relation("TestsInitiated")
  testsReceived           CompatibilityTest[]      @relation("TestsReceived")
  invitesReceived         Invite[]                 @relation("InvitesReceived")
  invitesSent             Invite[]                 @relation("InvitesSent")
}

model CompatibilityAttributes {
  mbtiType String?
  userId   Int     @unique
  id       Int     @id @default(autoincrement())
  uid      String  @unique @default(uuid())
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Invite {
  status      InviteStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  acceptedAt  DateTime?
  senderId    Int
  recipientId Int?
  uid         String       @unique @default(uuid())
  id          Int          @id @default(autoincrement())
  recipient   User?        @relation("InvitesReceived", fields: [recipientId], references: [id])
  sender      User         @relation("InvitesSent", fields: [senderId], references: [id])

  @@index([senderId, recipientId])
}

model CompatibilityTest {
  prompt           String
  result           Json
  model            String?
  createdAt        DateTime         @default(now())
  relationshipType RelationshipType
  user1Id          Int
  user2Id          Int
  uid              String           @unique @default(uuid())
  id               Int              @id @default(autoincrement())
  user1            User             @relation("TestsInitiated", fields: [user1Id], references: [id])
  user2            User             @relation("TestsReceived", fields: [user2Id], references: [id])

  @@unique([user1Id, user2Id, relationshipType, createdAt])
  @@index([user1Id])
  @@index([user2Id])
}

enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REJECTED
}

enum RelationshipType {
  LOVE
  FRIENDSHIP
  WORK
  FAMILY
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

/**
 * ---------- User ----------
 */
model User {
  id            String    @id @default(uuid())
  firebaseId    String    @unique
  username      String
  name          String
  email         String    @unique
  emailVerified Boolean
  picture       String?
  provider      String
  authTime      DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  compatibilityAttributes CompatibilityAttributes?

  invitesSent     Invite[]            @relation("InvitesSent")
  invitesReceived Invite[]            @relation("InvitesReceived")
  testsInitiated  CompatibilityTest[] @relation("TestsInitiated")
  testsReceived   CompatibilityTest[] @relation("TestsReceived")
}

/**
 * ---------- Compatibility Attributes (perfil psicom√©trico) ----------
 */
model CompatibilityAttributes {
  userId   String  @id
  mbtiType String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/**
 * ---------- Invite ----------
 */
model Invite {
  id          String       @id @default(uuid())
  senderId    String
  recipientId String?
  status      InviteStatus @default(PENDING)
  createdAt   DateTime     @default(now())
  acceptedAt  DateTime?

  sender    User  @relation("InvitesSent", fields: [senderId], references: [id])
  recipient User? @relation("InvitesReceived", fields: [recipientId], references: [id])

  @@index([senderId, recipientId])
}

/**
 * ---------- Compatibility Test ----------
 */
model CompatibilityTest {
  id               String           @id @default(uuid())
  user1Id          String
  user2Id          String
  relationshipType RelationshipType
  prompt           String // prompt usado para gerar o resultado
  result           Json
  model            String? // ex.: 'gpt-4o-mini'
  createdAt        DateTime         @default(now())

  user1 User @relation("TestsInitiated", fields: [user1Id], references: [id])
  user2 User @relation("TestsReceived", fields: [user2Id], references: [id])

  @@unique([user1Id, user2Id, relationshipType, createdAt])
  @@index([user1Id])
  @@index([user2Id])
}

/**
 * ---------- Enums ----------
 */
enum InviteStatus {
  PENDING
  ACCEPTED
  EXPIRED
  REJECTED
}

enum RelationshipType {
  LOVE
  FRIENDSHIP
  WORK
  FAMILY
}

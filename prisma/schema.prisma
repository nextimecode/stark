generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL_NON_POOLING")
}

model User {
  id            Int       @id @default(autoincrement())
  uid           String    @unique @default(uuid())
  firebaseId    String    @unique @map("firebase_id")
  username      String
  name          String
  email         String    @unique
  emailVerified Boolean   @map("email_verified")
  picture       String?
  provider      String
  authTime      DateTime? @map("auth_time")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")

  answers       Answer[]
  comments      comments[]
  notifications notifications[]
  questions     Question[]

  @@map("users")
}

model Question {
  id                                        String        @id
  title                                     String
  slug                                      String        @unique
  content                                   String
  createdAt                                 DateTime      @default(now()) @map("created_at")
  updated_at                                DateTime?
  author_id                                 Int
  best_answer_id                            String?       @unique
  answers                                   Answer[]
  attachments                               attachments[]
  comments                                  comments[]
  users                                     User          @relation(fields: [author_id], references: [id])
  answers_questions_best_answer_idToanswers Answer?       @relation("questions_best_answer_idToanswers", fields: [best_answer_id], references: [id])

  @@map("questions")
}

model Answer {
  id                                          String        @id
  content                                     String
  createdAt                                   DateTime      @default(now()) @map("created_at")
  updated_at                                  DateTime?
  author_id                                   Int
  questionId                                  String        @map("question_id")
  users                                       User          @relation(fields: [author_id], references: [id])
  question                                    Question      @relation(fields: [questionId], references: [id])
  attachments                                 attachments[]
  comments                                    comments[]
  questions_questions_best_answer_idToanswers Question?     @relation("questions_best_answer_idToanswers")

  @@map("answers")
}

model attachments {
  id          String    @id
  title       String
  url         String
  question_id String?
  answer_id   String?
  answers     Answer?   @relation(fields: [answer_id], references: [id])
  questions   Question? @relation(fields: [question_id], references: [id])
}

model comments {
  id          String    @id
  content     String
  author_id   Int
  question_id String?
  answer_id   String?
  created_at  DateTime  @default(now())
  updated_at  DateTime?
  answers     Answer?   @relation(fields: [answer_id], references: [id])
  users       User      @relation(fields: [author_id], references: [id])
  questions   Question? @relation(fields: [question_id], references: [id])
}

model notifications {
  id           String    @id
  recipient_id Int
  title        String
  content      String
  read_at      DateTime?
  created_at   DateTime  @default(now())
  users        User      @relation(fields: [recipient_id], references: [id])
}

enum UserRole {
  STUDENT
  INSTRUCTOR
}
